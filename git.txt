https://git-scm.com/book/ru/v2

cd C:/Users/user/my_project
перейти в папку с проектом

git files:

.git
папка с файлами гит (локальный репозиторий)
-------------------
.gitignore
файл git с исключениями, т.е. файлы и папки, указанные в этом файле будут игнорироваться для отслеживания.
https://github.com/github/gitignore
++++++++++++
.idea
node modules
build/
/TODO
doc/*.txt
doc/**/*.txt
++++++++++++
# Исключить все файлы с расширение .a
*.a
# Но отслеживать файл lib.a даже если он подпадает под исключение выше
!lib.a
# Исключить файл TODO в корневой директории, но не файл в subdir/TODO
/TODO
# Игнорировать все файлы в директории build/
build/
# Игнорировать файл doc/notes.txt, но не файл doc/server/arch.txt
doc/*.txt
# Игнорировать все .txt файлы в директории doc/
doc/**/*.txt



GIT commands:

git init
инициализация git в проекте = создается папка .git
-----------------------------
git remote add origin https://3314099@bitbucket.org/3314099/git.git
синхронизация локального и удаленного репозиториев.
Можно регистрировать несколько удаленных репозиториев.
Для того, чтобы просмотреть список настроенных удалённых репозиториев,
вы можете запустить команду
git remote
то увидите как минимум origin — имя по умолчанию, которое Git даёт серверу
 или
$ git remote -v
в итоге:
origin  https://3314099@bitbucket.org/3314099/git.git (fetch)
origin  https://3314099@bitbucket.org/3314099/git.git (push)
Если у вас больше одного удалённого репозитория, команда выведет их все.
$ git remote
origin
$ git remote add pb https://github.com/paulboone/ticgit
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
pb	https://github.com/paulboone/ticgit (fetch)
pb	https://github.com/paulboone/ticgit (push)
-------
Теперь вместо указания полного пути вы можете использовать pb.
Например, если вы хотите получить изменения, которые есть у Пола,
но нету у вас, вы можете выполнить команду git fetch pb:

$ git fetch pb
remote: Counting objects: 43, done.
remote: Compressing objects: 100% (36/36), done.
remote: Total 43 (delta 10), reused 31 (delta 5)
Unpacking objects: 100% (43/43), done.
From https://github.com/paulboone/ticgit
 * [new branch]      master     -> pb/master
 * [new branch]      ticgit     -> pb/ticgit
---------------
git clone https://3314099@bitbucket.org/3314099/git.git
клонирование проекта из удаленного репозитория в текущую папку
---------------
git clone https://3314099@bitbucket.org/3314099/git.git newFolder
клонирование проекта из удаленного репозитория в папку newFolder
----------------

git add index.html
добавить к отслеживанию файл index.html
----------------
git add .
добавить к отслеживанию все файлы
----------------


git status
просмотр состояния
---------
git status --short
= git status -s
сокращенный просмотр состояния
--------------
git diff
Если git status отвечает на эти вопросы в самом общем виде,
перечисляя имена файлов, git diff показывает вам непосредственно
добавленные и удалённые строки — патч как он есть.
--------------
Если вы хотите посмотреть, что вы проиндексировали и что войдёт в
следующий коммит, вы можете выполнить
git diff --staged
Эта команда сравнивает ваши проиндексированные изменения с последним коммитом.
а
git diff --cached
для просмотра проиндексированных изменений (--staged и --cached синонимы)
---------------
Удаление файлов
Для того чтобы удалить файл из Git,
вам необходимо удалить его из отслеживаемых файлов
(точнее, удалить его из вашего индекса) а затем выполнить коммит.
Это позволяет сделать команда
rm имя файла
git rm
, которая также удаляет файл из вашего
рабочего каталога, так что в следующий раз вы не увидите его как “неотслеживаемый”.

Если вы просто удалите файл из своего рабочего каталога, он будет показан в
секции “Changes not staged for commit” (измененные,
но не проиндексированные) вывода команды git status
---------------
вы можете захотеть оставить файл на жёстком диске, но перестать отслеживать
изменения в нём. Это особенно полезно, если вы забыли добавить что-то в
файл .gitignore и по ошибке проиндексировали, например,
большой файл с логами, или кучу промежуточных файлов компиляции.
Чтобы сделать это, используйте опцию --cached:
git rm --cached имя файла
-------------

git cat file -p "Название хэша"
просмотр изменений по хэшу после отслеживания
--------------
git log
показывает все коммиты сделанные в локальном репозитории
Одним из самых полезных аргументов является -p или --patch,
который показывает разницу (выводит патч), внесенную в каждый коммит.
Так же вы можете ограничить количество записей в выводе команды;
используйте параметр -2 для вывода только двух записей
git log -p -2
Например, если вы хотите увидеть сокращенную статистику для каждого коммита,
вы можете использовать опцию --stat:
$ git log --stat
Опция	Описание
-p      Показывает патч для каждого коммита.
--stat  Показывает статистику измененных файлов для каждого коммита.
--shortstat Отображает только строку с количеством изменений/вставок/удалений для команды --stat.
--name-only Показывает список измененных файлов после информации о коммите.
--name-status Показывает список файлов, которые добавлены/изменены/удалены.
--abbrev-commit Показывает только несколько символов SHA-1 чек-суммы вместо всех 40.
--relative-date Отображает дату в относительном формате (например, "2 weeks ago") вместо стандартного формата даты.
--graph Отображает ASCII граф с ветвлениями и историей слияний.
--pretty Показывает коммиты в альтернативном формате. Возможные варианты опций: oneline, short, full, fuller и format (с помощью последней можно указать свой формат).
--oneline Сокращение для одновременного использования опций --pretty=oneline --abbrev-commit.
---------------

git commit -m "Название коммита"
создание коммита
Если вы хотите переделать коммит — внесите необходимые изменения,
добавьте их в индекс и сделайте коммит ещё раз, указав параметр
--amend
git reset HEAD <file>... для исключения из индекса.
Здесь явно сказано как отменить существующие изменения. Давайте так и сделаем:
$ git checkout -- имя файла
Все локальные изменения в файле пропадут — Git просто заменит
его версией из последнего коммита.
-----------

git push -u origin master
Выполнив команду git push -u origin master вы устанавливаете связь
между той веткой, в которой вы находитесь и веткой master на удалённом сервере.
Команду требуется выполнить единожды, чтобы потом можно было
отправлять/принимать изменения лишь выполняя git push из ветки без указания
всяких алиасов для сервера и удалённых веток. Это сделано для удобства.
git push

--------------------
